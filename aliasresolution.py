'''
Filename: aliasresolution.py
Description: Alias resolution. Use CAIDA ITDK's midar-iff.nodes file to query directly.
FunctionList:
1.def extract_ip_set()  // Extract IP addresses from IP paths
2.def ip_router()   // Map IP addresses to the routers
'''


import pickle
from traceparser import IpPath
import numpy as np


# Extract IP addresses from IP paths
def extract_ip_set():
    ip_set = set()
    with open('../ip_paths.pkl', 'rb') as f:  # The file is generated by traceparser.py
        while True:
            try:
                ip_path = pickle.load(f)
                if ip_path.path is not False:
                    for ip in ip_path.path:
                        if ip != ip_path.dst[0]:  # Excluding the destination IP
                            ip_set.add(ip)
            except EOFError:
                break
    # print('The length of ip_set', len(ip_set))
    np.save('ip_set.npy', ip_set)


# Map IP addresses to the routers
def ip_router():
    ip_set = np.load('ip_set.npy', allow_pickle=True).item()
    print(type(ip_set))
    count = 0
    ip_router_dict = {}
    with open('midar-iff.nodes', 'r') as f1:
        for line in f1:
            if not line.startswith("#"):
                N_ip_list = line.split()
                router_num = N_ip_list[1][:-1]
                for ip in N_ip_list[2:]:
                    if ip in ip_set:
                        # print(ip)
                        ip_router_dict[ip] = router_num
                        # print(ip_router_dict[ip])
                        count += 1
                        print(count)
    print('The length of ip_router_dict', len(ip_router_dict))

    # The router number of the ip that is not in the file is set to the ip itself
    for ip in ip_set:
        if ip not in ip_router_dict:
            ip_router_dict[ip] = ip

    np.save('ip_router_dict.npy', ip_router_dict)


def pickle_load(filename):
    with open(filename, 'rb') as f:
        result = pickle.load(f)
    return result


if __name__ == '__main__':
    extract_ip_set()
    ip_router()




